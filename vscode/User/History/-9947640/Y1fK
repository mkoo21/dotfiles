#!/usr/bin/python

import os
import sys
import subprocess

from typing import TypedDict


from enum import Enum

class Options(TypedDict):
    InputPath: str
    OutputPath: str
    ArchiveCreated: bool
    ArchivePath: str

def check_arguments():
    if len(sys.argv) != 3:
        print(f"Usage: {sys.argv[0]} <input_path> <output_path>", file=sys.stderr)
        sys.exit(1)

def check_paths(opts: Options) -> Options:
    input_path = opts["InputPath"]
    # directories need to be archived prior
    if not os.path.exists(input_path):
        print(f"{input_path} does not exist")
        sys.exit(1)
    if os.path.isdir(input_path):
        tar_out_path = f"{input_path}.tar.gz"
        command = ["tar", "-czf", tar_out_path, input_path] # test
        run_command(command)

        opts["ArchiveCreated"] = True
        opts["InputPath"] = tar_out_path

    return opts

def encrypt(opts: Options):
    command = ["gpg", "--symmetric", "--output", opts["OutputPath"], opts["InputPath"]]
    run_command(command)

    if opts.


def run_command(command):
    result = subprocess.run(command)

    # forward output
    if result.stdout:
        print(result.stdout, end='')

    if result.stderr:
        print(result.stderr, end='', file=sys.stderr)
    # exit if fail
    if result.returncode != 0:
        sys.exit(result.returncode)

if __name__ == "__main__":
    check_arguments()

    opts: Options = { 
        "ArchiveCreated": False,
        "InputPath": sys.argv[1],
        "OutputPath": sys.argv[2],
    }
    check_paths(opts)